<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NeedIt When needed field date</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    // Add your code here
    // INFO: Tested ES6 variable declaration using let and got a parsing error
    var rightNow = new GlideDateTime();
    // Create a GlideDateTime object for the When needed date
    var whenNeeded = new GlideDateTime(current.u_when_needed);
    //     if (whenNeeded.before(rightNow)) {
    //         gs.addErrorMessage('Sorry your date cannot be in the past. Your request was not saved in the database');
    //         current.setAbortAction(true);
    //     }
    //     if (whenNeeded == rightNow) {
    //         return;
    //     }

//     var today = rightNow.getLocalDate();
//     var isToday = whenNeeded.getLocalDate();

    //     if (today.compareTo(isToday) == 0) {
    //         gs.addErrorMessage("You cannot submit NeedIt requests for today");
    //         current.setAbortAction(true);
    //     }
    // Instantiate the NeedItUtils class.  Call the isDatePast method and pass 
    // the u_when_needed value.
    // pass the When needed field value to the isDateToday method in NeedItUtils
            var isToday = niutils.isDateToday(current.u_when_needed);

            // if the isDateToday method returns true the When needed date is today 
            if (isToday == true) {
                gs.addErrorMessage("You cannot submit NeedIt requests for today.");
                current.setAbortAction(true);
            }          

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-03 16:21:40</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d3618dec47c2211042cf7601e36d43a9</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>NeedIt When needed field date</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_d3618dec47c2211042cf7601e36d43a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-04 12:23:56</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=d3618dec47c2211042cf7601e36d43a9"/>
</record_update>
